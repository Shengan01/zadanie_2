name: zadanie_2

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  ci_step:
    name: Build, tag and push Docker image to DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Check out the source_repo
        uses: actions/checkout@v4

      - name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/zadanie_2
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}

      - name: QEMU set-up
        uses: docker/setup-qemu-action@v3

      - name: Buildx set-up
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/zadanie_2:cache
          cache-to: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/zadanie_2:cache
          tags: ${{ steps.meta.outputs.tags }}

      - name: Docker Scout vulnerability scan
        id: scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ vars.DOCKERHUB_USERNAME }}/zadanie_2:${{ steps.meta.outputs.version }}
          summary: true
          format: json
      
      - name: Save Dcoker Scout results
        run: echo "${{ steps.scout.outputs.results }}" > scout-results.json
      
      - name: Display scout-results.json content
        run: cat scout-results.json
        
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check vulnerability scan results
        id: check-scan
        run: |
          critical=$(jq '.critical' < scout-results.json)
          high=$(jq '.high' < scout-results.json)
          if [ -z "$critical" ] || [ -z "$high" ]; then
            echo "Unable to parse vulnerability data. Skipping push to GHCR."
            exit 1
          elif [ "$critical" -ne 0 ] || [ "$high" -ne 0 ]; then
            echo "Image contains critical or high vulnerabilities. Skipping push to GHCR."
            exit 1
          else
            echo "No critical or high vulnerabilities found. Pushing image to GHCR."
            echo "***" | docker login ghcr.io -u Shengan01 --password-stdin
            docker tag shengan/zadanie_2:${{ github.sha}} ghcr.io/Shengan01/zadanie_2:${{ github.sha }}
            docker push ghcr.io/Shengan01/zadanie_2:${{ github.sha }}
          fi
